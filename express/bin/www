#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express4:server');
var http = require('http');
var fs = require("fs")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
io.on('connection', function(socket){ // socket相关监听都要放在这个回调里
  // console.log('a user connected');

  // socket.on("disconnect", function() {
  //     console.log("a user go out");
  // });
  function readFile(toSay){
    fs.readFile('./data.json', 'utf-8', function(err, data) {
      if (err) {
          throw err;
      }
      io.emit("allMessage", JSON.parse(data));//刷新全部列表
      //给某个人发消息
      console.info(toSay)
      if(toSay.toSay){
        fs.readFile('./name.json', 'utf-8', function(err, data1) {
          if (err) {
              throw err;
          }
         // console.info(data1)
          if(data1){
                let NameList=JSON.parse(data1);//全体用户名单
                let messagesList=JSON.parse(data);//全部消息
                let lastNews=messagesList[messagesList.length-1]
                let idList=[]
                //console.info(lastNews)
                for(let i=0;i<NameList.length;i++){
                  if(Object.keys(lastNews).length){
                    if(lastNews.value.indexOf(NameList[i].name)>-1){//消息里包含指定的名字
                      idList.push(NameList[i].id)
                    }
                  }
                }
               // console.info(idList);
                for(let j=0;j<idList.length;j++){
                  io.to(`${idList[j]}`).emit('someBodyCallYou', '有人评价了你去看看吧');
                }
          }
        });
      }
    });
  }
  function readFileForName(name,socketId){
    fs.readFile('./name.json', 'utf-8', function(err, data) {
      if (err) {
          throw err;
      }
      let newData
      if(!data){
        newData=[{id:socketId,name}]
      }else{
        newData=JSON.parse(data)
        newData.push(
          {id:socketId,name}
        )
      }
      fs.writeFile('./name.json',JSON.stringify(newData), function(err) {
        if (err) {
            throw err;
        }
        io.emit("login", {status:"success"});//登陆成功
      });

    });
  }
  socket.on("update", function(toSay) {
    readFile(toSay)
  });
  socket.on("login", function(name) {
    // console.info("dengrule")
    // console.log(socket.id);
    let socketId=socket.id
    readFileForName(name.name,socketId)
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
